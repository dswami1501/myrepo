Scenario 1: Api:https://jsonplaceholder.typicode.com/posts
Create complete basic small app for this scenario
Create a new user in a database by sending user details (name, email, password) to an API endpoint.
Requirements: Use the Fetch API to send a POST request to the API endpoint, handle the response, and display a success or error message to the user.
Ans) Creating the Form Component
1. Create a new component UserForm.js inside the src directory.
jsx
Copy code
// src/UserForm.js
import React, { useState } from 'react';

const UserForm = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');

  const handleSubmit = async (event) => {
    event.preventDefault();

    const userData = {
      name,
      email,
      password,
    };

    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      setMessage('User created successfully!');
      console.log('User data:', data);
    } catch (error) {
      setMessage('Failed to create user: ' + error.message);
    }
  };

  return (
    <div>
      <h2>Create User</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Name:</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </div>
        <div>
          <label>Email:</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div>
          <label>Password:</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <button type="submit">Create User</button>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
};

export default UserForm;
2. Updating the Main App Component
Modify App.js to include the UserForm component.

jsx
Copy code
// src/App.js
import React from 'react';
import UserForm from './UserForm';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>User Creation App</h1>
      </header>
      <main>
        <UserForm />
      </main>
    </div>
  );
}

export default App;

Scenario 2: Api:https://jsonplaceholder.typicode.com/posts
Create basic react app for this scenario
Read Operation (GET Request):
Fetch a list of products from an API and display them in a table on a web page.
Requirements: Use the Fetch API to send a GET request to the API endpoint, parse the JSON response, and dynamically generate HTML to display the product list.

Ans)1. Create a Component to Fetch and Display Data
You'll need a component that will fetch data from the API and render it in a table. Let's create a component named ProductTable.

src/ProductTable.js

jsx
Copy code
import React, { useState, useEffect } from 'react';

const ProductTable = () => {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    // Function to fetch products
    const fetchProducts = async () => {
      try {
        const response = await fetch('https://jsonplaceholder.typicode.com/posts');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        setProducts(data);
      } catch (error) {
        console.error('There was a problem with the fetch operation:', error);
      }
    };

    fetchProducts();
  }, []); // Empty dependency array means this effect runs once on mount

  return (
    <div>
      <h1>Product List</h1>
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Body</th>
          </tr>
        </thead>
        <tbody>
          {products.map(product => (
            <tr key={product.id}>
              <td>{product.id}</td>
              <td>{product.title}</td>
              <td>{product.body}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default ProductTable;
2. Use the Component in Your App
Replace the content of src/App.js with the following code to use the ProductTable component:

src/App.js

jsx
Copy code
import React from 'react';
import ProductTable from './ProductTable';

const App = () => {
  return (
    <div className="App">
      <ProductTable />
    </div>
  );
};

export default App;

Scenario 3: Api:https://jsonplaceholder.typicode.com/posts/{id}
Create basic react app for this scenario
Update Operation (PUT Request):
Update a user's profile information by sending the updated data (e.g., name, email) to an API endpoint.
Requirements: Use the Fetch API to send a PUT request to the API endpoint with the updated user data, handle the response, and display a success or error message to the user
Ans) React app that demonstrates how to perform an update operation using a PUT request with the Fetch API. For this example, I'll create a simple form that allows users to update a post's title and body.

Here's a step-by-step guide:

Create the React App:
Use Create React App to set up your environment if you haven't already:

bash
Copy code
npx create-react-app react-update-example
cd react-update-example
Update App.js:

jsx
Copy code
import React, { useState } from 'react';

function App() {
  const [post, setPost] = useState({
    title: '',
    body: ''
  });
  const [message, setMessage] = useState('');
  const [postId, setPostId] = useState(1); // Default to updating post with ID 1

  const handleChange = (e) => {
    const { name, value } = e.target;
    setPost({ ...post, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${postId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(post)
      });
      
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      setMessage(`Post updated successfully: ${JSON.stringify(data)}`);
    } catch (error) {
      setMessage(`Error: ${error.message}`);
    }
  };

  return (
    <div className="App">
      <h1>Update Post</h1>
      <form onSubmit={handleSubmit}>
        <div>
          <label>
            Post ID:
            <input
              type="number"
              value={postId}
              onChange={(e) => setPostId(e.target.value)}
            />
          </label>
        </div>
        <div>
          <label>
            Title:
            <input
              type="text"
              name="title"
              value={post.title}
              onChange={handleChange}
            />
          </label>
        </div>
        <div>
          <label>
            Body:
            <textarea
              name="body"
              value={post.body}
              onChange={handleChange}
            />
          </label>
        </div>
        <button type="submit">Update Post</button>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
}

export default App;
Run the App:

Start your React app with:

bash
Copy code
npm start
Explanation
State Management:

post state holds the title and body of the post to be updated.
postId state determines which post is being updated.
message state displays the success or error message.
Form Handling:

handleChange updates the post state with the new values from the form inputs.
handleSubmit performs the PUT request using Fetch API to update the post data on the server.
PUT Request:

The fetch function sends a PUT request to https://jsonplaceholder.typicode.com/posts/${postId} with the updated post data.
On success, it displays a success message; otherwise, it shows an error message.

Scenario 4: Delete Operation (DELETE Request):
Delete a specific item from a to-do list by sending the item ID to an API endpoint.
Requirements: Use the Fetch API to send a DELETE request to the API endpoint with the item ID, handle the response, and update the user interface to remove the deleted item from the list.
Ans)import React, { useState, useEffect } from 'react';

const App = () => {
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/posts')
      .then(response => response.json())
      .then(data => setPosts(data.slice(0, 10))); // Limit to 10 posts for simplicity
  }, []);

  const handleDelete = (id) => {
    fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {
      method: 'DELETE',
    })
      .then(response => {
        if (response.ok) {
          setPosts(posts.filter(post => post.id !== id));
        } else {
          console.error('Failed to delete the post');
        }
      })
      .catch(error => console.error('Error:', error));
  };

  return (
    <div className="App">
      <h1>To-Do List</h1>
      <ul>
        {posts.map(post => (
          <li key={post.id}>
            {post.title}
            <button onClick={() => handleDelete(post.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default App;

Scenario 5: Api:https://jsonplaceholder.typicode.com/posts
Create basic react app for this scenario
Combined Operations (GET and POST Requests):

Fetch a list of posts from an API and allow the user to add a new posts to the list.
Requirements: Use the Fetch API to send a GET request to fetch the existing posts and display them, then use a POST request to submit a new post and update the displayed list of posts dynamically.
Ans)import React, { useState, useEffect } from 'react';

const API_URL = 'https://jsonplaceholder.typicode.com/posts';

const App = () => {
  const [posts, setPosts] = useState([]);
  const [title, setTitle] = useState('');
  const [body, setBody] = useState('');

  useEffect(() => {
    // Fetch posts when the component mounts
    fetch(API_URL)
      .then(response => response.json())
      .then(data => setPosts(data))
      .catch(error => console.error('Error fetching posts:', error));
  }, []);

  const handleAddPost = (e) => {
    e.preventDefault();

    const newPost = {
      title,
      body,
      userId: 1 // assuming a fixed userId for simplicity
    };

    // Post the new post to the API
    fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-type': 'application/json; charset=UTF-8'
      },
      body: JSON.stringify(newPost)
    })
      .then(response => response.json())
      .then(data => {
        // Add the new post to the list of posts
        setPosts([data, ...posts]);
        setTitle('');
        setBody('');
      })
      .catch(error => console.error('Error adding post:', error));
  };

  return (
    <div className="App">
      <h1>Posts</h1>
      <form onSubmit={handleAddPost}>
        <input
          type="text"
          placeholder="Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
        <textarea
          placeholder="Body"
          value={body}
          onChange={(e) => setBody(e.target.value)}
        ></textarea>
        <button type="submit">Add Post</button>
      </form>
      <ul>
        {posts.map(post => (
          <li key={post.id}>
            <h2>{post.title}</h2>
            <p>{post.body}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;
